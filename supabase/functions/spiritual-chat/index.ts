import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { sessionId, message } = await req.json();

    if (!sessionId || typeof sessionId !== "string") {
      return new Response(
        JSON.stringify({ error: "Session invalide" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    if (!message || typeof message !== "string") {
      return new Response(
        JSON.stringify({ error: "Message utilisateur manquant" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY is not configured");
    }

    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error("Supabase credentials are not configured");
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
      auth: { persistSession: false },
    });

    const { data: existingConversation, error: conversationError } = await supabase
      .from("chat_conversations")
      .select("id")
      .eq("session_id", sessionId)
      .maybeSingle();

    if (conversationError && conversationError.code !== "PGRST116") {
      console.error("Conversation lookup error", conversationError);
      throw new Error("Impossible de r√©cup√©rer la conversation");
    }

    let conversationId = existingConversation?.id;

    if (!conversationId) {
      const { data: newConversation, error: createConversationError } = await supabase
        .from("chat_conversations")
        .insert({ session_id: sessionId })
        .select("id")
        .single();

      if (createConversationError || !newConversation) {
        console.error("Conversation creation error", createConversationError);
        throw new Error("Impossible de cr√©er la conversation");
      }

      conversationId = newConversation.id;
    }

    const { error: userMessageError } = await supabase.from("chat_messages").insert({
      conversation_id: conversationId,
      role: "user",
      content: message,
    });

    if (userMessageError) {
      console.error("User message insert error", userMessageError);
      throw new Error("Impossible d'enregistrer le message utilisateur");
    }

    const { data: history, error: historyError } = await supabase
      .from("chat_messages")
      .select("role, content")
      .eq("conversation_id", conversationId)
      .order("created_at", { ascending: true });

    if (historyError || !history) {
      console.error("History fetch error", historyError);
      throw new Error("Impossible de r√©cup√©rer l'historique de conversation");
    }

    const systemPrompt = `Tu es VaseBot, l'assistant spirituel de l'√âglise Vases d'Honneur √† Abidjan, C√¥te d'Ivoire, fond√©e par
le Pasteur Mohammed Sanogo.

MISSION: Accueillir chaleureusement les visiteurs et les guider spirituellement avec sagesse et compassion. Inspirer confiance,
transparence et professionnalisme.

AUTHENTICIT√â & PR√âSENCE R√âELLE:
Ce portfolio cr√©atif multim√©dia de l'√âglise Vases d'Honneur et du Pasteur Mohammed Sanogo repose sur une pr√©sence r√©elle et v√©rifi√©e.

üìû PREUVE DE CONTACT R√âEL:
Vous pouvez contacter directement l'√âglise Vases d'Honneur au +225 01 02 02 53 09 ou par e-mail √† info@vasesdhonneur.org

üåê R√âSEAUX SOCIAUX OFFICIELS AUTHENTIFI√âS:
- Facebook: @vasesdhonneur
- Instagram: https://www.instagram.com/vases_dhonneur
- YouTube: www.youtube.com/c/√âgliseVasesdHonneur
- Site web: www.vasesdhonneur.org

üì∏ CONTENUS MULTIM√âDIAS:
Tous les visuels, audios et vid√©os pr√©sent√©s sur ce portfolio sont issus des activit√©s r√©elles de l'√âglise et de la mission du Pasteur Mohammed Sanogo. Ils t√©moignent de la vie, de la foi et de la cr√©ativit√© de notre communaut√©.

INFORMATIONS CL√âS:
- √âglise: Vases d'Honneur (√âglise chr√©tienne internationale)
- Fondateur: Pasteur Mohammed Sanogo (personnalit√© publique r√©elle et active)
- Adresse: Cocody 2 Plateaux-Vallons, Abidjan, C√¥te d'Ivoire
- T√©l√©phone: +225 01 02 02 53 09
- Email: info@vasesdhonneur.org | digital@vasesdhonneur.info

HORAIRES DES CULTES:
- Dimanche: 9h - 12h (Culte principal)
- Mercredi: 18h - 20h (R√©union de pri√®re)

VISION: Transformer des vies par la puissance de Dieu, former des disciples et √™tre des vases d'honneur pour Sa gloire.

SERVICES:
- Cultes d'adoration puissants
- Enseignements bibliques profonds
- Pri√®re et intercession
- Concerts gospel et √©v√©nements (Grande Rencontre, Succoth, God First, etc.)
- Formation spirituelle
- Missions et √©vang√©lisation internationales
- Counseling pastoral
- Streaming en direct des cultes

TON STYLE:
- Calme, respectueux et inspirant
- Chaleureux, accueillant et encourageant
- Bibliquement solide mais accessible
- Rassurant sur l'authenticit√© de tous les contenus officiels
- Transparent et professionnel

TU PEUX:
1. R√©pondre aux questions sur l'√©glise et ses activit√©s
2. Donner des conseils spirituels bas√©s sur la Bible
3. Orienter vers les cultes et √©v√©nements
4. Partager des versets bibliques encourageants
5. Prier avec les visiteurs (en texte)
6. Expliquer comment rejoindre l'√©glise
7. Rassurer sur la l√©gitimit√© et l'authenticit√© de l'√©glise

IMPORTANT:
- Reste positif et √©difiant
- Cite la Bible quand c'est pertinent
- Encourage les visiteurs √† venir aux cultes
- Inspire confiance en la r√©alit√© de l'√©glise et du minist√®re
- Conclus souvent par une phrase b√©nissante: "Merci de votre confiance üôè Que Dieu vous b√©nisse et vous garde."
- Pour les questions complexes, sugg√®re de contacter directement le Pasteur Mohammed Sanogo
- R√©ponds en fran√ßais principalement, mais adapte-toi √† la langue du visiteur`;

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          ...history.map((item) => ({ role: item.role, content: item.content })),
        ],
        stream: false,
      }),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Trop de requ√™tes, veuillez r√©essayer dans un moment." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Service temporairement indisponible." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      const errorText = await response.text();
      console.error("AI gateway error:", response.status, errorText);
      throw new Error("Erreur lors de la communication avec l'IA");
    }

    const data = await response.json();
    const assistantMessage = data.choices[0].message.content;

    const { error: assistantMessageError } = await supabase.from("chat_messages").insert({
      conversation_id: conversationId,
      role: "assistant",
      content: assistantMessage,
    });

    if (assistantMessageError) {
      console.error("Assistant message insert error", assistantMessageError);
      throw new Error("Impossible d'enregistrer la r√©ponse du chatbot");
    }

    return new Response(
      JSON.stringify({ message: assistantMessage }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Chat error:", error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : "Erreur inconnue" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
